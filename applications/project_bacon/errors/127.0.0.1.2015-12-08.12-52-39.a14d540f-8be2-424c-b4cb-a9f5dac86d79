(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Syntax Not Supported"
p3
sS'layer'
p4
S'/Users/Mvelasquez/Desktop/project-bacon/applications/project_bacon/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nimport logging\nlogger = logging.getLogger("web2py.app.myweb2pyapplication")\nlogger.setLevel(logging.DEBUG)\n\n\ndef index():\n    """\n    Splash page\n    """\n    if auth.user_id:\n        redirect(URL(\'default\',\'board\'))\n\n    return dict()\n\n\ndef instructions():\n\n    return dict()\n\n\ndef wordlist():\n    """\n    List of all words used in the game\n    """\n    rows = db(db.wordList.id > 0).select(db.wordList.word)\n    word_list = [r.word for r in rows]\n    a = []\n    b = []\n    c = []\n    d = []\n    e = []\n    f = []\n    g = []\n    h = []\n    i = []\n    j = []\n    k = []\n    l = []\n    m = []\n    n = []\n    o = []\n    p = []\n    q = []\n    r = []\n    s = []\n    t = []\n    u = []\n    v = []\n    w = []\n    x = []\n    y = []\n    z = []\n    for word in word_list:\n        if word[0] == \'a\':\n            a.append(word)\n        if word[0] == \'b\':\n            b.append(word)\n        if word[0] == \'c\':\n            c.append(word)\n        if word[0] == \'d\':\n            d.append(word)\n        if word[0] == \'e\':\n            e.append(word)\n        if word[0] == \'f\':\n            f.append(word)\n        if word[0] == \'g\':\n            g.append(word)\n        if word[0] == \'h\':\n            h.append(word)\n        if word[0] == \'i\':\n            i.append(word)\n        if word[0] == \'j\':\n            j.append(word)\n        if word[0] == \'k\':\n            k.append(word)\n        if word[0] == \'l\':\n            l.append(word)\n        if word[0] == \'m\':\n            m.append(word)\n        if word[0] == \'n\':\n            n.append(word)\n        if word[0] == \'o\':\n            o.append(word)\n        if word[0] == \'p\':\n            p.append(word)\n        if word[0] == \'q\':\n            q.append(word)\n        if word[0] == \'r\':\n            r.append(word)\n        if word[0] == \'s\':\n            s.append(word)\n        if word[0] == \'t\':\n            t.append(word)\n        if word[0] == \'u\':\n            u.append(word)\n        if word[0] == \'v\':\n            v.append(word)\n        if word[0] == \'w\':\n            w.append(word)\n        if word[0] == \'x\':\n            x.append(word)\n        if word[0] == \'y\':\n            y.append(word)\n        if word[0] == \'z\':\n            z.append(word)\n    return dict(a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h, i=i, j=j, k=k, l=l, m=m,\n                n=n, o=o, p=p, q=q, r=r, s=s, t=t, u=u, v=v, w=w, x=x, y=y, z=z)\n\n\ndef board():\n    """\n    List of playable games\n    """\n    return dict()\n\n\ndef game():\n    """\n    Individual game\n    """\n    game = db(db.games.id == request.args(0)).select().first()\n    rows = db().select(db.wordList.ALL)\n    d = [r.word for r in rows]\n    return dict(targetWord=game.targetWord)\n\n\ndef load_wordlist():\n    """\n    Loads the list of words\n    """\n    rows = db().select(db.wordList.ALL)\n    d = [r.word for r in rows]\n    return response.json(dict(wordList=d))\n\n\n\ndef add_game():\n    """\n    Adds a game to the database\n    Removes a game name from the database\n    """\n    db.games.update_or_insert(targetWord = request.vars.targetWord)\n    db(db.game_names.word == request.vars.targetWord).delete()\n    return \'ok\'\n\ndef send_score():\n    rows = db(db.games.targetWord == request.vars.targetWord).select().first()\n    # logger.debug(rows)\n    # for row in rows:\n    #     logger.debug("preIf:"+row.highScore)\n    #     if row.highScore is None or int(request.vars.score) > row.highScore:\n    #         logger.debug("postIf:"+row.highScore)\n    #         db.games.update(db.games.targetWord == request.vars.targetWord, winner=auth.user_id, highScore = int(request.vars.score), scoreDate = datetime.utcnow())\n    if rows is None or int(request.vars.score) > rows.highScore:\n        # logger.debug("postIf:"+rows)\n        db.games.update(db.games.targetWord == request.vars.targetWord, winner=auth.user_id, highScore = int(request.vars.score), scoreDate = datetime.utcnow())\n    return True;\n\ndef load_games():\n    """\n    Loads the list of created games\n    """\n    rows = db().select(db.games.ALL)\n    d = {r.id: {\'word\': r.targetWord, \'highScore\':r.highScore, \'winner\':r.winner} for r in rows}\n    return response.json(dict(games=d))\n\n\ndef load_game_names():\n    """\n    Loads the list of available game names\n    """\n    rows = db().select(db.game_names.ALL)\n    d2 = [r.word for r in rows]\n    return response.json(dict(game_names=d2))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(send_score)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Mvelasquez/Desktop/project-bacon/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Mvelasquez/Desktop/project-bacon/applications/project_bacon/controllers/default.py", line 225, in <module>\n  File "/Users/Mvelasquez/Desktop/project-bacon/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Mvelasquez/Desktop/project-bacon/applications/project_bacon/controllers/default.py", line 165, in send_score\n    db.games.update(db.games.targetWord == request.vars.targetWord, winner=auth.user_id, highScore = int(request.vars.score), scoreDate = datetime.utcnow())\n  File "/Users/Mvelasquez/Desktop/project-bacon/gluon/packages/dal/pydal/objects.py", line 358, in update\n    raise RuntimeError("Syntax Not Supported")\nRuntimeError: Syntax Not Supported\n'
p11
s.